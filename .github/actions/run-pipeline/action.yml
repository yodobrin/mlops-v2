---

name: "Run Azure ML Pipeline"
description: "Run an Azure ML pipeline and monitor its status"
inputs:
  parameters:
    description: "Pipeline parameters"
    required: true
  resource_group:
    description: "Azure resource group"
    required: true
  workspace_name:
    description: "Azure ML workspace name"
    required: true
  azure_tenant_id:
    description: 'Azure tenant ID'
    type: string
    required: true
  azure_client_id:
    description: 'User Assigned - client ID'
    type: string
    required: true
  azure_subscription:
    description: 'Azure subscription ID'
    type: string
    required: true
  audience:
    description: 'Audience for the Azure Machine Learning online endpoint'
    type: string
    required: true



runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Az CLI login
      uses: azure/login@v1
      with:
          tenant-id: ${{ inputs.azure_tenant_id }}
          client-id: ${{ inputs.azure_client_id }}
          subscription-id: ${{ inputs.azure_subscription }}
          audience: ${{ inputs.audience }}

    - name: Install Azure ML extension
      run: |
        az extension add -n ml -y
      shell: bash

    - name: Update Azure ML extension
      run: |
        az extension update -n ml
      shell: bash

    - name: Run Azure ML pipeline
      run: |
        run_id=$(az ml job create --file ${{ github.workspace }}/${{ inputs.parameters  }} --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --query name -o tsv)
        if [[ -z "$run_id" ]]
        then
          echo "Job creation failed"
          exit 3
        fi
        az ml job show -n $run_id --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --web 
        status=$(az ml job show -n $run_id --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --query status -o tsv)
        if [[ -z "$status" ]]
        then
          echo "Status query failed"
          exit 4
        fi
        running=("NotStarted" "Queued" "Starting" "Preparing" "Running" "Finalizing" "CancelRequested")
        while [[ ${running[*]} =~ $status ]]
        do
          sleep 15 
          status=$(az ml job show -n $run_id --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --query status -o tsv)
          echo $status
        done
        if [[ "$status" != "Completed" ]]  
        then
          echo "Training Job failed or canceled"
          exit 3
        fi
      shell: bash
